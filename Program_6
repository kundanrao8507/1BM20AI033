import torch
import torch.nn as nn
import torch.optim as optim
from torch.utils.data import DataLoader
from torchvision import datasets, transforms
from torchvision.utils import save_image
import os

# Set random seed for reproducibility
torch.manual_seed(42)

# Hyperparameters
batch_size = 128
learning_rate = 0.001
num_epochs = 20

# Define the denoising autoencoder model
class DenoisingAutoencoder(nn.Module):
    def __init__(self):
        super(DenoisingAutoencoder, self).__init__()
        self.encoder = nn.Sequential(
            nn.Linear(28 * 28, 128),
            nn.ReLU(),
            nn.Linear(128, 64),
            nn.ReLU(),
            nn.Linear(64, 32),
            nn.ReLU()
        )
        self.decoder = nn.Sequential(
            nn.Linear(32, 64),
            nn.ReLU(),
            nn.Linear(64, 128),
            nn.ReLU(),
            nn.Linear(128, 28 * 28),
            nn.Sigmoid()
        )

    def forward(self, x):
        x = x.view(x.size(0), -1)
        encoded = self.encoder(x)
        decoded = self.decoder(encoded)
        decoded = decoded.view(decoded.size(0), 1, 28, 28)  # Reshape to image size
        return encoded, decoded

# Load MNIST dataset using torchvision
transform = transforms.Compose([
    transforms.ToTensor(),
    transforms.Lambda(lambda x: x + 0.3 * torch.randn_like(x))  # Add random noise
])

train_dataset = datasets.MNIST(root='./data', train=True, download=True, transform=transform)
train_loader = DataLoader(dataset=train_dataset, batch_size=batch_size, shuffle=True)

# Initialize the model, loss function, and optimizer
model = DenoisingAutoencoder()
criterion = nn.MSELoss()
optimizer = optim.Adam(model.parameters(), lr=learning_rate)

# Training loop
for epoch in range(num_epochs):
    total_loss = 0
    for batch_idx, (data, _) in enumerate(train_loader):
        optimizer.zero_grad()
        _, reconstructed = model(data)
        loss = criterion(reconstructed, data)
        loss.backward()
        optimizer.step()
        total_loss += loss.item()

    # Print progress
    print(f'Epoch [{epoch + 1}/{num_epochs}], Loss: {total_loss / len(train_loader.dataset):.4f}')

# Save the trained model
if not os.path.exists('models'):
    os.makedirs('models')

torch.save(model.state_dict(), 'models/denoising_autoencoder.pth')

# Test the model by reconstructing some images
test_dataset = datasets.MNIST(root='./data', train=False, download=True, transform=transform)
test_loader = DataLoader(dataset=test_dataset, batch_size=5, shuffle=True)

model.eval()
with torch.no_grad():
    for data, _ in test_loader:
        _, reconstructed = model(data)
        original_images = data.view(-1, 1, 28, 28)
        reconstructed_images = reconstructed.view(-1, 1, 28, 28)
        comparison = torch.cat([original_images, reconstructed_images])
        save_image(comparison, 'reconstructed_images.png', nrow=5)
        break  # Only visualize the first batch

print('Reconstructed images saved as reconstructed_images.png')
